#!/usr/bin/env node
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const LOG_DIR = path.join(__dirname, '../../build/logs');
const DEBUG_LOG = path.join(LOG_DIR, 'tag_debug.log');
const HISTORY_LOG = path.join(LOG_DIR, 'tag_history.log');
const ERROR_LOG = path.join(LOG_DIR, 'tag_error.log');
const ENV_FILE = path.join(__dirname, '../../build/.env');

function manageLog(logFilePath, maxEntries = 500) {
    try {
      if (fs.existsSync(logFilePath)) {
        const lines = fs.readFileSync(logFilePath, 'utf8').split('\n').filter(line => line.trim());
        if (lines.length > maxEntries) {
          fs.writeFileSync(logFilePath, '');
          debugLog(`Cleared history log (${lines.length} entries exceeded ${maxEntries} limit)`);
          return true; // Indicate that log was cleared
        }
      }
      return false; // Indicate that log was not cleared
    } catch (error) {
      errorLog(`History log clearance failed for ${logFilePath}: ${error.message}`);
      throw error; // Re-throw the error if you want calling code to handle it
    }
  }

// Initialize logs
function initLogs() {
  if (!fs.existsSync(LOG_DIR)) {
    fs.mkdirSync(LOG_DIR, { recursive: true });
  }
  fs.writeFileSync(DEBUG_LOG, '');
  manageLog(HISTORY_LOG);
  if (!fs.existsSync(HISTORY_LOG)) fs.writeFileSync(HISTORY_LOG, '');
  manageLog(ERROR_LOG);
  if (!fs.existsSync(ERROR_LOG)) fs.writeFileSync(ERROR_LOG, '');
}

function debugLog(message) {
  const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
  fs.appendFileSync(DEBUG_LOG, `[DEBUG ${timestamp}] ${message}\n`);
}

function historyLog(message) {
  const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
  fs.appendFileSync(HISTORY_LOG, `${timestamp} - ${message}\n`);
}

function errorLog(message) {
  const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
  fs.appendFileSync(ERROR_LOG, `[ERROR ${timestamp}] ${message}\n`);
}

function getTagVersion() {
  try {
    debugLog('Reading TAG_VERSION from .env');
    const envContent = fs.readFileSync(ENV_FILE, 'utf8');
    const match = envContent.match(/TAG_VERSION=([^\n]+)/);
    if (!match) throw new Error('TAG_VERSION not found in .env');
    debugLog(`Found TAG_VERSION: ${match[1]}`);
    return match[1];
  } catch (error) {
    errorLog(`getTagVersion error: ${error.message}`);
    throw error;
  }
}

function tagExists(tagName) {
  try {
    execSync(`git rev-parse ${tagName}`, { stdio: 'pipe' });
    return true;
  } catch {
    return false;
  }
}

function createAndPushTag() {
    try {
      debugLog('Starting tag creation process');
      
      // 1. Get version from .env
      const version = getTagVersion();
      const tagName = `v${version}`;
      debugLog(`Tag to be created: ${tagName}`);
  
      // 2. Verify tag doesn't exist
      debugLog(`Checking if tag exists: ${tagName}`);
      if (execSync(`git tag -l "${tagName}"`, { encoding: 'utf8' }).trim() === tagName) {
        throw new Error(`Tag ${tagName} already exists`);
      }
      debugLog(`Tag ${tagName} does not exist - proceeding`);
  
      // 3. Create annotated tag
      debugLog(`Creating annotated tag with message: "${tagName}"`);
      execSync(`git tag -a ${tagName} -m "${tagName}"`, { stdio: 'inherit' });
      debugLog(`Successfully created tag locally: ${tagName}`);
  
      // 4. Push tag to remote
      debugLog(`Pushing tag to remote: ${tagName}`);
      const pushOutput = execSync(`git push origin ${tagName}`, { encoding: 'utf8' });
      debugLog(`Git push output: ${pushOutput.trim()}`);
  
      // 5. Verify remote tag
      debugLog(`Verifying remote tag exists: ${tagName}`);
      const remoteTags = execSync('git ls-remote --tags origin', { encoding: 'utf8' });
      if (!remoteTags.includes(`refs/tags/${tagName}`)) {
        throw new Error(`Failed to verify tag on remote: ${tagName}`);
      }
  
      historyLog(`Created and pushed tag: ${tagName}`);
      console.log(`✅ Successfully deployed tag: ${tagName}`);
      debugLog('Tag creation process completed successfully');
  
    } catch (error) {
      debugLog(`Tag creation failed at step: ${error.message}`);
      errorLog(`Tag creation failed: ${error.message}`);
      console.error(`❌ Error creating tag: ${error.message}`);
      throw error; // Re-throw to maintain error chain
    }
  }

// Main execution
initLogs();
debugLog('Starting post-commit hook');

try {
  // Get the CURRENT commit message (not last)
  const commitMsg = execSync('git log -1 --pretty=%B', { encoding: 'utf8' }).trim();
  debugLog(`Current commit message: "${commitMsg}"`);

  if (commitMsg.includes('-d')) {
    debugLog('Deployment flag (-d) found');
    
    // Verify we're on the expected branch (e.g., main/master)
    const branch = execSync('git symbolic-ref --short HEAD', { encoding: 'utf8' }).trim();
    if (!['main', 'master'].includes(branch)) {
      throw new Error(`Deployment tags only allowed on main/master (current: ${branch})`);
    }

    // Create and push tag
    createAndPushTag();
    
    // Push the commit if not already pushed
    try {
      execSync('git push origin HEAD', { stdio: 'inherit' });
    } catch (pushError) {
      debugLog('Commit was already pushed or push failed');
    }
  }
} catch (error) {
  errorLog(`Error: ${error.message}`);
  console.error(`❌ ${error.message}`);
} finally {
  debugLog('Post-commit hook completed');
}